[{"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\index.tsx":"1","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\App.tsx":"2","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\styles\\Theme.ts":"3","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\Header.tsx":"4","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\Login.tsx":"5","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\Navbar.tsx":"6","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\Medical.tsx":"7","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\MedicalForm.tsx":"8","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\Appbar.tsx":"9","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\IcdModal.tsx":"10","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\Sidebar.tsx":"11","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\DataTable.tsx":"12","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\FormModal.tsx":"13","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\Snackbar.tsx":"14","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\pages\\data.tsx":"15","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\UI\\components\\RadioButton\\RadioButton.tsx":"16","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\UI\\components\\Button\\Button.tsx":"17","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\UI\\components\\TextField\\InputField.tsx":"18","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\UI\\components\\Dropdown\\Dropdown.tsx":"19","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\UI\\components\\IconButton\\IconButton.tsx":"20","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\Modal.tsx":"21","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\pages\\SidebarData.tsx":"22","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_helpers\\index.js":"23","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_helpers\\fake-backend.js":"24","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_helpers\\store.js":"25","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_helpers\\history.js":"26","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_helpers\\auth-header.js":"27","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_reducers\\index.js":"28","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_reducers\\alert.reducer.js":"29","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_reducers\\users.reducer.js":"30","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_reducers\\registration.reducer.js":"31","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_reducers\\authentication.reducer.js":"32","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_constants\\index.js":"33","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_constants\\user.constants.js":"34","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_constants\\alert.constants.js":"35","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_actions\\index.js":"36","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_actions\\alert.actions.js":"37","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_actions\\user.actions.js":"38","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_services\\index.js":"39","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_services\\user.service.js":"40"},{"size":348,"mtime":1633968871918,"results":"41","hashOfConfig":"42"},{"size":816,"mtime":1633971349276,"results":"43","hashOfConfig":"42"},{"size":948,"mtime":1633685006000,"results":"44","hashOfConfig":"42"},{"size":498,"mtime":1633685006000,"results":"45","hashOfConfig":"42"},{"size":9551,"mtime":1633972776209,"results":"46","hashOfConfig":"42"},{"size":2138,"mtime":1633685006000,"results":"47","hashOfConfig":"42"},{"size":57416,"mtime":1633886147700,"results":"48","hashOfConfig":"42"},{"size":8058,"mtime":1633685006000,"results":"49","hashOfConfig":"42"},{"size":487,"mtime":1633685006000,"results":"50","hashOfConfig":"42"},{"size":6453,"mtime":1633705118000,"results":"51","hashOfConfig":"42"},{"size":9501,"mtime":1633685006000,"results":"52","hashOfConfig":"42"},{"size":12284,"mtime":1633765376000,"results":"53","hashOfConfig":"42"},{"size":6662,"mtime":1633705372000,"results":"54","hashOfConfig":"42"},{"size":884,"mtime":1633685006000,"results":"55","hashOfConfig":"42"},{"size":3384,"mtime":1633685006000,"results":"56","hashOfConfig":"42"},{"size":593,"mtime":1633785567371,"results":"57","hashOfConfig":"42"},{"size":1345,"mtime":1633765232000,"results":"58","hashOfConfig":"42"},{"size":1563,"mtime":1633779471995,"results":"59","hashOfConfig":"42"},{"size":2137,"mtime":1633797791271,"results":"60","hashOfConfig":"42"},{"size":2002,"mtime":1633765792000,"results":"61","hashOfConfig":"42"},{"size":3471,"mtime":1633685006000,"results":"62","hashOfConfig":"42"},{"size":2441,"mtime":1633685006000,"results":"63","hashOfConfig":"42"},{"size":117,"mtime":1633968390883,"results":"64","hashOfConfig":"42"},{"size":0,"mtime":1633968546274,"results":"65","hashOfConfig":"42"},{"size":455,"mtime":1633968768807,"results":"66","hashOfConfig":"42"},{"size":103,"mtime":1633971453189,"results":"67","hashOfConfig":"42"},{"size":277,"mtime":1633968390882,"results":"68","hashOfConfig":"42"},{"size":374,"mtime":1633968390886,"results":"69","hashOfConfig":"42"},{"size":459,"mtime":1633968390884,"results":"70","hashOfConfig":"42"},{"size":1471,"mtime":1633968390886,"results":"71","hashOfConfig":"42"},{"size":367,"mtime":1633968390886,"results":"72","hashOfConfig":"42"},{"size":681,"mtime":1633972568910,"results":"73","hashOfConfig":"42"},{"size":69,"mtime":1633968390881,"results":"74","hashOfConfig":"42"},{"size":185,"mtime":1633968948054,"results":"75","hashOfConfig":"42"},{"size":121,"mtime":1633968390880,"results":"76","hashOfConfig":"42"},{"size":67,"mtime":1633968390878,"results":"77","hashOfConfig":"42"},{"size":364,"mtime":1633968390878,"results":"78","hashOfConfig":"42"},{"size":1131,"mtime":1633971639659,"results":"79","hashOfConfig":"42"},{"size":33,"mtime":1633968390887,"results":"80","hashOfConfig":"42"},{"size":590,"mtime":1633971812934,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"1qcqxd2",{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":1,"source":"97","usedDeprecatedRules":"84"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"84"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"131"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\index.tsx",[],["167","168"],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\App.tsx",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\styles\\Theme.ts",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\Header.tsx",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\Login.tsx",["169","170","171","172","173"],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\Navbar.tsx",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\Medical.tsx",["174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189"],"import React, { useState } from \"react\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport {\r\n  Typography,\r\n  Toolbar,\r\n  Grid,\r\n  Paper,\r\n  makeStyles,\r\n  Avatar,\r\n  Select,\r\n  FormControl,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport Navbar from \"./Navbar\";\r\nimport IcdModal from \"./IcdModal\";\r\nimport data from \"../pages/FormData.json\";\r\n// import Radio from \"@material-ui/core/Radio\";\r\nimport { withStyles } from \"@material-ui/styles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport Appbar from \"./Appbar\";\r\n// import AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport { Box } from \"@material-ui/core\";\r\nimport Formmodal from \"./FormModal\";\r\nimport Datatable from \"./DataTable\";\r\nimport SnackBar from \"./Snackbar\";\r\nimport { createDatamain } from \"../pages/data\";\r\nimport ServiceheadCells from \"../pages/ServiceheadCells.json\";\r\nimport icdheadCells from \"../pages/icdheadCells.json\";\r\nimport ProviderData from \"../pages/ProviderData.json\";\r\nimport documentcells from \"../pages/documentcells.json\";\r\nimport notescells from \"../pages/notescells.json\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport IconButton from \"../UI/components/IconButton/IconButton\";\r\nimport ButtonComponent from \"../UI/components/Button/Button\";\r\nimport RadioButtonComp from \"../UI/components/RadioButton/RadioButton\";\r\nimport InputField from \"../UI/components/TextField/InputField\";\r\nimport Dropdown from \"../UI/components/Dropdown/Dropdown\";\r\n\r\nconst BootstrapInput = withStyles((theme) => ({\r\n  root: {\r\n    \"label + &\": {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n  },\r\n  input: {\r\n    borderRadius: 4,\r\n    position: \"relative\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"1px solid #ced4da\",\r\n    fontSize: 16,\r\n    padding: \"10px 26px 10px 12px\",\r\n    transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n    fontFamily: [\r\n      \"-apple-system\",\r\n      \"BlinkMacSystemFont\",\r\n      '\"Segoe UI\"',\r\n      \"Roboto\",\r\n      '\"Helvetica Neue\"',\r\n      \"Arial\",\r\n      \"sans-serif\",\r\n      '\"Apple Color Emoji\"',\r\n      '\"Segoe UI Emoji\"',\r\n      '\"Segoe UI Symbol\"',\r\n    ].join(\",\"),\r\n    \"&:focus\": {\r\n      borderRadius: 4,\r\n      borderColor: \"#80bdff\",\r\n      boxShadow: \"0 0 0 0.2rem rgba(0,123,255,.25)\",\r\n    },\r\n  },\r\n}))(InputBase);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  palette: {\r\n    primary: {\r\n      main: \"#0c1d7b\",\r\n    },\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"left\",\r\n    color: \"#0c1d7b\",\r\n  },\r\n  grid: {\r\n    marginTop: \"-43px\",\r\n    backgroundColor: \"#fff\",\r\n  },\r\n  btn: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  toolbarItem1: {\r\n    border: \"2px solid #dcd7d7\",\r\n    minHeight: \"32px\",\r\n    borderRadius: \"6px\",\r\n    backgroundColor: \"#edeef3\",\r\n    height: \"300px\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      height: \"329px\",\r\n    },\r\n  },\r\n  doc: {\r\n    border: \"2px solid #dcd7d7\",\r\n    minHeight: \"32px\",\r\n    borderRadius: \"6px\",\r\n    backgroundColor: \"#edeef3\",\r\n    height: \"35px\",\r\n    marginTop: \"10px\",\r\n  },\r\n  tool: {\r\n    border: \"2px solid #dcd7d7\",\r\n    minHeight: \"32px\",\r\n    borderRadius: \"6px\",\r\n    backgroundColor: \"#edeef3\",\r\n    marginTop: \"12px\",\r\n  },\r\n  toolbarItem2: {\r\n    borderLeft: \"2px solid #dcd7d7\",\r\n    borderBottom: \"2px solid #dcd7d7\",\r\n    borderRight: \"2px solid #dcd7d7\",\r\n    borderRadius: \"6px\",\r\n    width: \"97%\",\r\n    paddingLeft: \"16px\",\r\n    paddingRight: \"16px\",\r\n  },\r\n  form: {\r\n    padding: \"15px\",\r\n  },\r\n  gridContainer: {\r\n    width: \"inherit\",\r\n    padding: \"24px 0px\",\r\n    marginTop: \"0px\",\r\n  },\r\n  container: {\r\n    height: \"48px\",\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  radio: {\r\n    colorPrimary: {\r\n      \"&$checked\": {\r\n        color: \"blue\",\r\n      },\r\n    },\r\n    checked: {},\r\n  },\r\n  avatar: {\r\n    marginBottom: \"129px\",\r\n    marginRight: \"10px\",\r\n  },\r\n  resetbtn: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    marginTop: \"5px\",\r\n  },\r\n  line: {\r\n    borderBottom: \"1px solid #d6d0d0\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n  auth: {\r\n    color: \"white\",\r\n    backgroundColor: \"grey\",\r\n    borderRadius: \"5px\",\r\n  },\r\n  typobreak: {\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      fontSize: \"1.2rem\",\r\n    },\r\n  },\r\n  typomobile: {\r\n    color: \"#383131\",\r\n    borderBottom: \"1px solid #d6d0d0\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      fontSize: \"1rem\",\r\n    },\r\n  },\r\n  servicetypo: {\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      fontSize: \"9px\",\r\n      marginTop: \"9px\",\r\n    },\r\n  },\r\n  breakbtn: {\r\n    marginRight: \"5px\",\r\n    textTransform: \"none\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      fontSize: \"9px\",\r\n    },\r\n  },\r\n}));\r\n\r\ninterface IState {\r\n  rowdata: any;\r\n}\r\n\r\nexport default function Medical() {\r\n  const classes = useStyles();\r\n  const [serviceProvider, setserviceProvider] = useState<boolean>(false);\r\n  const [IcdmodalOpen, setIcdmodal] = useState<boolean>(false);\r\n\r\n  const [modalformdata, setmodalformdata] = useState<object | any>({});\r\n  const [mainlist, setmainlist] = useState<any>([]);\r\n  const [documentdata] = React.useState([]);\r\n  const [notesdata] = React.useState([]);\r\n  const [snackBarOpen, setSnackBarOpen] = useState<boolean>(false);\r\n  const [severity, setSeverity] = useState<string>(\"\");\r\n  const [message, setMessage] = useState<string>(\"\");\r\n  const [selectIcddetails, setselectIcddetails] = useState([]);\r\n  const [loop, setloop] = useState<any>([]);\r\n  const [openStaticdata, setOpenStaticdata] = React.useState(false);\r\n  const [testData, setTestData] = useState<any>(data);\r\n  const [checked, setchecked] = React.useState(false);\r\n\r\n  const [userinfo, setUserinfo] = useState<any>({\r\n    zipcode: \"\",\r\n    phone_number: \"\",\r\n    fax_number: \"\",\r\n    provider: \"\",\r\n    authid: \"\",\r\n    speciality: \"\",\r\n    provider_status: \"\",\r\n    first_name: \"\",\r\n    last_name: \"\",\r\n    organization: \"\",\r\n    address1: \"\",\r\n    address2: \"\",\r\n    city: \"\",\r\n    state: \"\",\r\n    contact_name: \"\",\r\n    contact_phone: \"\",\r\n  });\r\n\r\n  const [error1] = useState<any>({\r\n    fax_number: ProviderData[10].errmsg,\r\n  });\r\n\r\n  const [error, setError] = useState<any>({\r\n    zipcode: data[\"textfield2\"][0].errmsg,\r\n    phone_number: data[\"textfield2\"][1].errmsg,\r\n    fax_number: data[\"textfield2\"][2].errmsg,\r\n  });\r\n\r\n  const location = useLocation();\r\n  const rowdata = (location.state as IState).rowdata;\r\n\r\n  const handleClose = () => {\r\n    //  setOpen(false);\r\n    setIcdmodal(false);\r\n    setserviceProvider(false);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (\r\n      modalformdata[\"fax_number\"] === undefined ||\r\n      !(\r\n        modalformdata[\"fax_number\"].toString().length > 0 &&\r\n        modalformdata[\"fax_number\"].toString().length <= 10\r\n      )\r\n    ) {\r\n      setSnackBarOpen(true);\r\n      setSeverity(\"error\");\r\n      setMessage(error1.fax_number);\r\n    } else {\r\n      setmainlist((mainlist: any) => [\r\n        createDatamain(\r\n          modalformdata.PROVIDER_NAME,\r\n          modalformdata.NPI,\r\n          modalformdata.DEA,\r\n          modalformdata.SPECALITY,\r\n          modalformdata.NETWORK,\r\n          modalformdata.ADDRESS,\r\n          modalformdata.FAX_NUMBER,\r\n          modalformdata.PROVIDER_TYPE,\r\n          \"Pending\"\r\n        ),\r\n      ]);\r\n      setserviceProvider(false);\r\n    }\r\n  };\r\n\r\n  const handleFormSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (\r\n      userinfo[\"fax_number\"]?.length > 0 &&\r\n      userinfo[\"fax_number\"]?.length < 10 ||\r\n      userinfo[\"zipcode\"]?.length > 0 &&\r\n      userinfo[\"phone_number\"]?.length > 0 &&\r\n      userinfo[\"provider\"]?.length > 0 &&\r\n      userinfo[\"authid\"]?.length > 0 &&\r\n      userinfo[\"speciality\"]?.length > 0 &&\r\n      userinfo[\"provider_status\"]?.length > 0 &&\r\n      userinfo[\"first_name\"]?.length > 0 &&\r\n      userinfo[\"last_name\"]?.length > 0 &&\r\n      userinfo[\"organization\"]?.length > 0 &&\r\n      userinfo[\"address1\"]?.length > 0 &&\r\n      userinfo[\"address2\"]?.length > 0 &&\r\n      userinfo[\"city\"]?.length > 0 &&\r\n      userinfo[\"state\"]?.length > 0 &&\r\n      userinfo[\"contact_name\"]?.length > 0 &&\r\n      userinfo[\"contact_phone\"]?.length > 0\r\n    ) {\r\n      setSnackBarOpen(true);\r\n      setSeverity(\"success\");\r\n      setMessage(\"Data Saved Succesfully\");\r\n      setOpenStaticdata(true);\r\n    } else if (\r\n      userinfo[\"zipcode\"]?.length <= 0 ||\r\n      (userinfo[\"phone_number\"]?.length <= 0 &&\r\n        userinfo[\"phone_number\"]?.length > 0 ||\r\n        /^(\\([0-9]{3}\\) |[0-9]{3}-)[0-9]{3}-[0-9]{4}$/.test(\r\n          userinfo[\"phone_number\"]\r\n        )) ||\r\n      userinfo[\"fax_number\"]?.length <= 0 ||\r\n      userinfo[\"provider\"]?.length <= 0 ||\r\n      userinfo[\"authid\"]?.length <= 0 ||\r\n      userinfo[\"speciality\"]?.length <= 0 ||\r\n      userinfo[\"provider_status\"]?.length <= 0 ||\r\n      userinfo[\"first_name\"]?.length <= 0 ||\r\n      userinfo[\"last_name\"]?.length <= 0 ||\r\n      userinfo[\"organization\"]?.length <= 0 ||\r\n      userinfo[\"address1\"]?.length <= 0 ||\r\n      userinfo[\"address2\"]?.length <= 0 ||\r\n      userinfo[\"city\"]?.length <= 0 ||\r\n      userinfo[\"state\"]?.length <= 0 ||\r\n      userinfo[\"contact_name\"]?.length <= 0 ||\r\n      userinfo[\"contact_phone\"]?.length <= 0\r\n    ) {\r\n      setSnackBarOpen(true);\r\n      setMessage(\"Please Fill All Mandatory Fields\");\r\n      setSeverity(\"error\");\r\n    } else if (\r\n      !(\r\n        userinfo[\"fax_number\"]?.length > 0 \r\n        ||\r\n        userinfo[\"fax_number\"]?.length <= 10\r\n      )\r\n    ) {\r\n      setSnackBarOpen(true);\r\n      setSeverity(\"error\");\r\n      // setMessage(error.fax_number);\r\n      setMessage(\"Please Fill All Mandatory Fields\");\r\n    }\r\n\r\n    var dropdownArray: any[] = [],\r\n      textfieldArray: any[] = [],\r\n      textfield1Array: any[] = [],\r\n      textfield2Array: any[] = [],\r\n      textfield3Array: any[] = [];\r\n    let errors: object | any = {};\r\n    var keys = [\r\n      \"dropdown\",\r\n      \"textfield\",\r\n      \"textfield1\",\r\n      \"textfield2\",\r\n      \"textfield3\",\r\n    ];\r\n    // eslint-disable-next-line array-callback-return\r\n    keys.map((key) => {\r\n      // eslint-disable-next-line array-callback-return\r\n      testData[key].map((item: any) => {\r\n        if (\r\n          item.value === \"\" ||\r\n          (item.value !== \"\" && item.value.length < 3) ||\r\n          item.value.length > 10\r\n        ) {\r\n          item.errState = true;\r\n          errors[item.key] = \"validation Error\";\r\n        }\r\n        if (key === \"dropdown\") dropdownArray.push(item);\r\n        if (key === \"textfield\") textfieldArray.push(item);\r\n        if (key === \"textfield1\") textfield1Array.push(item);\r\n        if (key === \"textfield2\") textfield2Array.push(item);\r\n        if (key === \"textfield3\") textfield3Array.push(item);\r\n      });\r\n    });\r\n    setTestData((state: any) => ({\r\n      ...state,\r\n      dropdown: dropdownArray,\r\n      textfield: textfieldArray,\r\n      textfield1: textfield1Array,\r\n      textfield2: textfield2Array,\r\n      textfield3: textfield3Array,\r\n    }));\r\n\r\n    setUserinfo(\"\");\r\n  };\r\n\r\n  const handleSnackbarClose = () => {\r\n    setSnackBarOpen(false);\r\n  };\r\n  const handleupdate = (\r\n    e: { target: { value: any | undefined; name?: string | any | undefined } },\r\n    value: string\r\n  ) => {\r\n    if (value === \"Request Type\" && e.target.value === 1) {\r\n      setloop([\r\n        {\r\n          name: 1,\r\n          list: [\r\n            { name: \"17-09-2021\" },\r\n            { name: \"18-09-2021\" },\r\n            { name: \"19-09-2021\" },\r\n          ],\r\n        },\r\n        {\r\n          name: \"2\",\r\n          list: [\r\n            { name: \"20-09-2021\" },\r\n            { name: \"21-09-2021\" },\r\n            { name: \"22-09-2021\" },\r\n          ],\r\n        },\r\n      ]);\r\n    } else {\r\n      setloop([]);\r\n    }\r\n  };\r\n\r\n  const name1 =\r\n    \"Please upload additional documentation supporting your request\";\r\n  const name2 = \"Authorization Status:\";\r\n  const [displayname, setDisplayName] = React.useState(name1);\r\n\r\n  const onSecondClick = () => {\r\n    setDisplayName(name2);\r\n  };\r\n\r\n  const handleEventChange = (\r\n    key: string | number,\r\n    info: { name: any },\r\n    e: { target: { value: any | undefined; name?: any | undefined } }\r\n  ) => {\r\n    var array: any[] = [];\r\n    // eslint-disable-next-line array-callback-return\r\n    testData[key].map(\r\n      (item: { name: any; value: string; errState: boolean }) => {\r\n        if (item.name === info.name) {\r\n          item.value = e.target.value;\r\n          if (item.value !== \"\") item.errState = false;\r\n        }\r\n        array.push(item);\r\n      }\r\n    );\r\n    setTestData((state: any) => ({ ...state, [key]: array }));\r\n    setUserinfo((state: any) => ({\r\n      ...state,\r\n      [e.target.name]: e.target.value,\r\n    }));\r\n    setError((state: any) => ({\r\n      ...state,\r\n      [e.target.name]: info,\r\n    }));\r\n  };\r\n\r\n  const handleBlurChange = (\r\n    key: any,\r\n    info: any,\r\n    e: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    var array: any[] = [];\r\n    // eslint-disable-next-line array-callback-return\r\n    testData[key].map((item: any) => {\r\n      /*     if(info.name === \"phone_number\" && e.target.value.length > 0){\r\n        item.value = e.target.value;\r\n       if(/^(\\([0-9]{3}\\) |[0-9]{3}-)[0-9]{3}-[0-9]{4}$/.test(e.target.value)){\r\n          item.errState = false;\r\n       }\r\n  console.log(/^(\\([0-9]{3}\\) |[0-9]{3}-)[0-9]{3}-[0-9]{4}$/.test(e.target.value), e.target.value.length > 0,\"test\")\r\n \r\n  } */\r\n\r\n      if (item.name === info.name) {\r\n        if (\r\n          item.value === \"\" ||\r\n          (item.value !== \"\" && item.value.length < 3) ||\r\n          item.value.length > 15\r\n        ) {\r\n          item.errState = true;\r\n        } else item.errState = false;\r\n      }\r\n      array.push(item);\r\n    });\r\n    setTestData((state: any) => ({ ...state, [key]: array }));\r\n  };\r\n\r\n  const formatPhoneNumber = (value: any) => {\r\n    if (!value) return value;\r\n    const phoneNumber = value.replace(/[^\\d]/g, \"\");\r\n    const phoneNumberLength = phoneNumber.length;\r\n    if (phoneNumberLength < 4) return phoneNumber;\r\n    if (phoneNumberLength < 7) {\r\n      return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;\r\n    }\r\n    return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(\r\n      3,\r\n      6\r\n    )}-${phoneNumber.slice(6, 9)}`;\r\n  };\r\n\r\n  const phoneNumberFormatter = (e: any) => {\r\n    const formattedInputValue = formatPhoneNumber(e.target.value);\r\n    var array: any[] = [];\r\n    // eslint-disable-next-line array-callback-return\r\n    testData[\"textfield2\"].map(\r\n      (item: { name: any; value: string; errState: boolean }) => {\r\n        if (item.name === \"phone_number\") {\r\n          item.value = formattedInputValue;\r\n          if (item.value !== \"\") item.errState = false;\r\n        }\r\n        array.push(item);\r\n      }\r\n    );\r\n    setTestData((state: any) => ({ ...state, textfield2: array }));\r\n  };\r\n\r\n  const handleRadio = (e: any, value: any) => {\r\n    if (value === \"Yes\" || value === \"No\") {\r\n      let radiodata = testData.radio[0].list.map((item: any) => {\r\n        if (item.name === value) {\r\n          return {\r\n            ...item,\r\n            check: true,\r\n          };\r\n        } else {\r\n          return {\r\n            ...item,\r\n            check: false,\r\n          };\r\n        }\r\n      });\r\n      setTestData((state: any) => ({\r\n        ...state,\r\n        radio: testData.radio.map((item: any) => {\r\n          return {\r\n            ...item,\r\n            list: radiodata,\r\n          };\r\n        }),\r\n      }));\r\n    } else {\r\n      setTestData((state: any) => ({\r\n        ...state,\r\n        authorization: [\r\n          {\r\n            ...testData.authorization[0],\r\n\r\n            list: testData.authorization[0].list.map((item: any) => {\r\n              if (item.name === value) {\r\n                return {\r\n                  ...item,\r\n                  check: true,\r\n                };\r\n              } else {\r\n                return {\r\n                  ...item,\r\n                  check: false,\r\n                };\r\n              }\r\n            }),\r\n          },\r\n        ],\r\n      }));\r\n    }\r\n  };\r\n\r\n  // console.log(testData)\r\n\r\n  const handleselect = (e: any, value: any) => {\r\n    console.log(e.target.value);\r\n\r\n    var array: any[] = [];\r\n    // eslint-disable-next-line array-callback-return\r\n    let data = testData[\"dropdown\"].map((item: any) => {\r\n      debugger;\r\n      if (item.name === value) {\r\n        return {\r\n          ...item,\r\n          value: e.target.value,\r\n          errState: false,\r\n        };\r\n      } else {\r\n        return {\r\n          ...item,\r\n        };\r\n      }\r\n    });\r\n    console.log(data);\r\n    setTestData((state: any) => ({\r\n      ...state,\r\n      [\"dropdown\"]: data,\r\n    }));\r\n    setUserinfo((state: any) => ({\r\n      ...state,\r\n      [e.target.name]: e.target.value,\r\n    }));\r\n    setError((state: any) => ({\r\n      ...state,\r\n      [e.target.name]: value,\r\n    }));\r\n  };\r\n\r\n  console.log(testData);\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Appbar />\r\n      <div className={classes.root}>\r\n        <Grid container>\r\n          <Grid item xs={2}>\r\n            <Sidebar />\r\n          </Grid>\r\n\r\n          <Grid item xs={10} className={classes.grid}>\r\n            <Grid item xs={12}>\r\n              <Paper className={classes.paper}>\r\n                <Typography variant=\"h5\" className={classes.typobreak}>\r\n                  Request Medical Prior Authorizations\r\n                </Typography>\r\n              </Paper>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} className={classes.form}>\r\n              <Toolbar className={classes.toolbarItem1}>\r\n                <Avatar\r\n                  alt=\"Remy Sharp\"\r\n                  variant=\"square\"\r\n                  className={classes.avatar}\r\n                />\r\n                {rowdata ? (\r\n                  <>\r\n                    <div\r\n                      className={classes.root}\r\n                      style={{ borderTop: \"1px solid grey\" }}\r\n                    >\r\n                      <Grid container spacing={3}>\r\n                        <Grid item xs={4}>\r\n                          <Typography>Name: {rowdata.first_name}</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                          <Typography>\r\n                            Member ID: {rowdata.member_id}\r\n                          </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                          {/* <Button variant=\"contained\" color=\"secondary\"\r\n                   style={{ textTransform: \"none\" }}>\r\n                     Member Eligible\r\n                     </Button> */}\r\n                          <Typography>\r\n                            Plan Type/Group ID#: {rowdata.plan_desc}\r\n                          </Typography>\r\n                        </Grid>\r\n                      </Grid>\r\n\r\n                      <Grid container spacing={3}>\r\n                        <Grid item xs={4}>\r\n                          <Typography>\r\n                            Date of Birth: {rowdata.dateof_birth}\r\n                          </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                          <Typography>\r\n                            LOB: {rowdata.lineof_business}\r\n                          </Typography>\r\n                        </Grid>\r\n                      </Grid>\r\n\r\n                      <Grid container spacing={3}>\r\n                        <Grid item xs={4}>\r\n                          <Typography>Address: {rowdata.address}</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                          <Typography>IPA/MG: {rowdata.ipa_code}</Typography>\r\n                        </Grid>\r\n                      </Grid>\r\n\r\n                      <Grid container spacing={3}>\r\n                        <Grid item xs={4}>\r\n                          <Typography>Phone: 123-456-7890</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                          <Typography>\r\n                            Effective: {rowdata.effective_date}\r\n                          </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                          <Typography>Term: {rowdata.term_date}</Typography>\r\n                        </Grid>\r\n                      </Grid>\r\n                      <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                          <Typography>Special Programs:</Typography>\r\n                        </Grid>\r\n                      </Grid>\r\n                      <Grid container spacing={3}>\r\n                        <Grid item xs={4}>\r\n                          <Typography>\r\n                            Contact Number: {rowdata.contract_number}\r\n                          </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                          <Typography>\r\n                            PBP Number: {rowdata.pbp_number}\r\n                          </Typography>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </div>\r\n                  </>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </Toolbar>\r\n\r\n              {openStaticdata ? (\r\n                <>\r\n                  {displayname && displayname === name1 ? (\r\n                    <>\r\n                      <Typography\r\n                        variant=\"h6\"\r\n                        style={{\r\n                          color: \"#383131\",\r\n                          borderBottom: \"1px solid #d6d0d0\",\r\n                          marginTop: \"30px\",\r\n                        }}\r\n                      >\r\n                        {displayname}\r\n                      </Typography>\r\n\r\n                      <Toolbar className={classes.doc}>\r\n                        <Typography variant=\"h6\">Upload documents</Typography>\r\n                      </Toolbar>\r\n                      <Toolbar className={classes.toolbarItem2}>\r\n                        <div className={classes.gridContainer}>\r\n                          <Datatable\r\n                            rows={documentdata}\r\n                            rowsshow={documentdata.length > 0 ? true : false}\r\n                            headCells={documentcells}\r\n                            handlerowdata={[]}\r\n                            IcdModal={false}\r\n                          />\r\n                          <Typography\r\n                            variant=\"h5\"\r\n                            style={{\r\n                              padding: \"0px\",\r\n                              fontSize: \"12px\",\r\n                              fontFamily: \"serif\",\r\n                              textAlign: \"center\",\r\n                            }}\r\n                          >\r\n                            No Data Found...\r\n                          </Typography>\r\n                        </div>\r\n                      </Toolbar>\r\n\r\n                      <Typography\r\n                        variant=\"h5\"\r\n                        style={{\r\n                          color: \"#383131\",\r\n                          borderBottom: \"1px solid #d6d0d0\",\r\n                          marginTop: \"10px\",\r\n                        }}\r\n                      >\r\n                        Notes\r\n                      </Typography>\r\n\r\n                      <Toolbar className={classes.doc}>\r\n                        <Typography variant=\"h6\">Notes</Typography>\r\n                      </Toolbar>\r\n                      <Toolbar className={classes.toolbarItem2}>\r\n                        <div className={classes.gridContainer}>\r\n                          <Datatable\r\n                            rows={notesdata}\r\n                            rowsshow={notesdata.length > 0 ? true : false}\r\n                            headCells={notescells}\r\n                            handlerowdata={[]}\r\n                            IcdModal={false}\r\n                          />\r\n                          <Typography\r\n                            variant=\"h5\"\r\n                            style={{\r\n                              padding: \"0px\",\r\n                              fontSize: \"12px\",\r\n                              fontFamily: \"serif\",\r\n                              textAlign: \"center\",\r\n                            }}\r\n                          >\r\n                            No Data Found...\r\n                          </Typography>\r\n                        </div>\r\n                      </Toolbar>\r\n                    </>\r\n                  ) : null}\r\n\r\n                  {displayname && displayname === name2 ? (\r\n                    <>\r\n                      <Toolbar className={classes.toolbarItem2}>\r\n                        {/* <div>{displayname}</div> */}\r\n\r\n                        <Grid container spacing={0}>\r\n                          <Grid item xs={3}>\r\n                            <div style={{ padding: \"5px\" }}>\r\n                              <Typography variant=\"h5\" className={classes.auth}>\r\n                                Authorization Status:\r\n                              </Typography>\r\n                            </div>\r\n\r\n                            <div style={{ padding: \"5px\" }}>\r\n                              <Typography variant=\"h5\" className={classes.auth}>\r\n                                Decision:\r\n                              </Typography>\r\n                            </div>\r\n                            <div style={{ padding: \"5px\" }}>\r\n                              <Typography variant=\"h5\" className={classes.auth}>\r\n                                Procedure Status:\r\n                              </Typography>\r\n                            </div>\r\n                          </Grid>\r\n                          <Grid item xs={3}></Grid>\r\n\r\n                          <Grid item xs={3}>\r\n                            <div style={{ padding: \"5px\" }}>\r\n                              <Typography variant=\"h5\" className={classes.auth}>\r\n                                Reason:\r\n                              </Typography>\r\n                            </div>\r\n                            <div style={{ padding: \"5px\" }}>\r\n                              <Typography variant=\"h5\" className={classes.auth}>\r\n                                Reference#:\r\n                              </Typography>\r\n                            </div>\r\n                          </Grid>\r\n                          <Grid item xs={3}></Grid>\r\n                          <ButtonComponent\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            btn=\"btn\"\r\n                          >\r\n                            Create Auth for same member\r\n                          </ButtonComponent>\r\n                          <ButtonComponent\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            btn=\"btn\"\r\n                          >\r\n                            Create Auth for different member\r\n                          </ButtonComponent>\r\n                        </Grid>\r\n                      </Toolbar>\r\n                    </>\r\n                  ) : null}\r\n\r\n                  <ButtonComponent\r\n                    variant=\"contained\"\r\n                    type=\"submit\"\r\n                    color=\"primary\"\r\n                    btn=\"btn\"\r\n                    handleSubmit={onSecondClick}\r\n                  >\r\n                    Submit\r\n                    {/* <ChevronRightIcon /> */}\r\n                  </ButtonComponent>\r\n                </>\r\n              ) : (\r\n                <Toolbar className={classes.toolbarItem2}>\r\n                  <form\r\n                    className={classes.gridContainer}\r\n                    autoComplete=\"off\"\r\n                    onSubmit={handleFormSubmit}\r\n                  >\r\n                    <Grid className={classes.line} container>\r\n                      <Box\r\n                        height=\"100%\"\r\n                        display=\"flex\"\r\n                        justifyContent=\"center\"\r\n                        flexDirection=\"column\"\r\n                        alignItems=\"center\"\r\n                      >\r\n                        {testData.authorization.map(\r\n                          (input: any, index: any) => (\r\n                            <>\r\n                              {input.type === \"radio\" ? (\r\n                                <>\r\n                                  <Grid item xs={12}>\r\n                                    <Typography\r\n                                      variant=\"h6\"\r\n                                      style={{\r\n                                        color: \"#383131\",\r\n                                      }}\r\n                                      key={index}\r\n                                    >\r\n                                      {input.textlabel}\r\n                                    </Typography>\r\n                                  </Grid>\r\n                                  <Grid item xs={12}>\r\n                                    {input.list.map((item: any) => {\r\n                                      return (\r\n                                        <>\r\n                                          <RadioButtonComp\r\n                                            label={item.name}\r\n                                            color=\"primary\"\r\n                                            size=\"small\"\r\n                                            checked={item.check}\r\n                                            handleRadio={handleRadio}\r\n                                          />\r\n                                        </>\r\n                                      );\r\n                                    })}\r\n                                  </Grid>\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </>\r\n                          )\r\n                        )}\r\n                      </Box>\r\n                    </Grid>\r\n\r\n                    <Grid\r\n                      container\r\n                      direction=\"row\"\r\n                      spacing={3}\r\n                      xs={12}\r\n                      style={{ marginTop: \"2px\" }}\r\n                    >\r\n                      {testData.dropdown.map((input: any, index: any) => (\r\n                        <>\r\n                          {input.type === \"dropdown\" ? (\r\n                            <>\r\n                              <Grid item xs={6} md={4} lg={3}>\r\n                                <Typography variant=\"body1\" key={index}>\r\n                                  {input.textlabel}\r\n                                </Typography>\r\n\r\n                                <Dropdown\r\n                                  input={input}\r\n                                  handleChange={handleselect}\r\n                                />\r\n\r\n                                {input.errState ? (\r\n                                  <Typography color=\"secondary\">\r\n                                    {input.value === \"\"\r\n                                      ? input.errEmptyMsg\r\n                                      : null}\r\n                                  </Typography>\r\n                                ) : null}\r\n\r\n                                {/* <FormControl fullWidth>\r\n                                  <Select\r\n                                  labelId=\"demo-customized-select-label\"\r\n                                  id=\"demo-customized-select\"\r\n                                  input={<BootstrapInput />}\r\n                                  fullWidth\r\n                                   onChange={(e) =>\r\n                                      handleEventChange(\"dropdown\", input, e)\r\n                                    }\r\n                                    onBlur={(e) =>\r\n                                      handleBlurChange(\"dropdown\", input, e)\r\n                                    }\r\n                                    value={input.value}\r\n                                    name={input.name}\r\n                                    // errmsg={input.errState}\r\n                                  >\r\n                                    {input.list.map((item:any) => {\r\n                                      return (\r\n                                        <MenuItem value={item.name}>\r\n                                          <Typography\r\n                                            style={{ fontSize: \"12px\" }}\r\n                                          >\r\n                                            {item.name}\r\n                                          </Typography>\r\n                                        </MenuItem>\r\n                                      );\r\n                                    })}\r\n                                  </Select>\r\n                                  {input.errState ? (\r\n                                    <Typography color=\"secondary\">\r\n                                      {input.value === \"\"\r\n                                        ? input.errEmptyMsg\r\n                                        : null}\r\n                                    </Typography>\r\n                                  ) : null}\r\n                                </FormControl> */}\r\n                              </Grid>\r\n                            </>\r\n                          ) : (\r\n                            <>\r\n                              <Grid item xs={6} md={4} lg={3}>\r\n                                <Grid container direction=\"column\">\r\n                                  <Grid item>\r\n                                    <Typography\r\n                                      variant=\"body1\"\r\n                                      style={{ fontWeight: 600 }}\r\n                                    >\r\n                                      {input.textlabel}\r\n                                    </Typography>\r\n                                  </Grid>\r\n\r\n                                  <Grid item>\r\n                                    <InputField\r\n                                      variant=\"outlined\"\r\n                                      fullWidth={input.fullWidth}\r\n                                      type={input.type}\r\n                                      size=\"small\"\r\n                                      handleChange={(e) =>\r\n                                        handleEventChange(\"dropdown\", input, e)\r\n                                      }\r\n                                      handleBlur={(e) =>\r\n                                        handleBlurChange(\"dropdown\", input, e)\r\n                                      }\r\n                                      value={input.value}\r\n                                      name={input.name}\r\n                                      error={input.errState}\r\n                                    />\r\n                                    {input.errState ? (\r\n                                      <Typography color=\"secondary\">\r\n                                        {input.value === \"\"\r\n                                          ? input.errEmptyMsg\r\n                                          : input.value.length < 3\r\n                                          ? input.errMinMsg\r\n                                          : input.value.length > 10\r\n                                          ? input.errMaxMsg\r\n                                          : null}\r\n                                      </Typography>\r\n                                    ) : null}\r\n                                  </Grid>\r\n                                </Grid>\r\n                              </Grid>\r\n                            </>\r\n                          )}\r\n                        </>\r\n                      ))}\r\n\r\n                      <Grid\r\n                        container\r\n                        xs={12}\r\n                        spacing={3}\r\n                        style={{ marginLeft: \"3px\" }}\r\n                      >\r\n                        {testData.textfield.map((input: any, index: any) => (\r\n                          <Grid item xs={6} md={4} lg={3}>\r\n                            <Grid container direction=\"column\">\r\n                              <Grid item>\r\n                                <Typography\r\n                                  variant=\"body1\"\r\n                                  style={{ fontWeight: 600 }}\r\n                                  key={index}\r\n                                >\r\n                                  {input.textlabel}\r\n                                </Typography>\r\n                              </Grid>\r\n\r\n                              <Grid item>\r\n                                <InputField\r\n                                  variant=\"outlined\"\r\n                                  fullWidth={input.fullWidth}\r\n                                  type={input.type}\r\n                                  size=\"small\"\r\n                                  handleChange={(e) =>\r\n                                    handleEventChange(\"textfield\", input, e)\r\n                                  }\r\n                                  handleBlur={(e) =>\r\n                                    handleBlurChange(\"textfield\", input, e)\r\n                                  }\r\n                                  value={input.value}\r\n                                  name={input.name}\r\n                                  error={input.errState}\r\n                                />\r\n                                {input.errState ? (\r\n                                  <Typography color=\"secondary\">\r\n                                    {input.value === \"\"\r\n                                      ? input.errEmptyMsg\r\n                                      : input.value.length < 3\r\n                                      ? input.errMinMsg\r\n                                      : input.value.length > 15\r\n                                      ? input.errMaxMsg\r\n                                      : null}\r\n                                  </Typography>\r\n                                ) : null}\r\n                              </Grid>\r\n                            </Grid>\r\n                          </Grid>\r\n                        ))}\r\n                      </Grid>\r\n\r\n                      {testData.textfield1.map((input: any, index: any) => (\r\n                        <Grid item xs={6} md={4} lg={3}>\r\n                          <Grid container direction=\"column\">\r\n                            <Grid item>\r\n                              <Typography\r\n                                variant=\"body1\"\r\n                                style={{ fontWeight: 600 }}\r\n                                key={index}\r\n                              >\r\n                                {input.textlabel}\r\n                              </Typography>\r\n                            </Grid>\r\n\r\n                            <Grid item>\r\n                              <InputField\r\n                                variant=\"outlined\"\r\n                                fullWidth={input.fullWidth}\r\n                                type={input.type}\r\n                                size=\"small\"\r\n                                handleChange={(e) =>\r\n                                  handleEventChange(\"textfield1\", input, e)\r\n                                }\r\n                                handleBlur={(e) =>\r\n                                  handleBlurChange(\"textfield1\", input, e)\r\n                                }\r\n                                value={input.value}\r\n                                name={input.name}\r\n                                error={input.errState}\r\n                              />\r\n                              {input.errState ? (\r\n                                <Typography color=\"secondary\">\r\n                                  {input.value === \"\"\r\n                                    ? input.errEmptyMsg\r\n                                    : input.value.length < 3\r\n                                    ? input.errMinMsg\r\n                                    : input.value.length > 15\r\n                                    ? input.errMaxMsg\r\n                                    : null}\r\n                                </Typography>\r\n                              ) : null}\r\n                            </Grid>\r\n                          </Grid>\r\n                        </Grid>\r\n                      ))}\r\n\r\n                      {testData.textfield2.map((input: any, index: any) => (\r\n                        <Grid item xs={6} md={4} lg={3}>\r\n                          <Grid container direction=\"column\">\r\n                            <Grid item>\r\n                              <Typography\r\n                                variant=\"body1\"\r\n                                style={{ fontWeight: 600 }}\r\n                                key={index}\r\n                              >\r\n                                {input.textlabel}\r\n                              </Typography>\r\n                            </Grid>\r\n\r\n                            <Grid item>\r\n                              <InputField\r\n                                variant=\"outlined\"\r\n                                fullWidth={input.fullWidth}\r\n                                type={input.type}\r\n                                size=\"small\"\r\n                                id={input.name}\r\n                                handleChange={(e) =>\r\n                                  handleEventChange(\"textfield2\", input, e)\r\n                                }\r\n                                handleBlur={(e) =>\r\n                                  handleBlurChange(\"textfield2\", input, e)\r\n                                }\r\n                                value={input.value}\r\n                                name={input.name}\r\n                                error={input.errState}\r\n                                phoneNumberFormatter={phoneNumberFormatter}\r\n                              />\r\n                              {input.errState ? (\r\n                                <Typography color=\"secondary\">\r\n                                  {input.value === \"\"\r\n                                    ? input.errEmptyMsg\r\n                                    : !/^(\\([0-9]{3}\\) |[0-9]{3}-)[0-9]{3}-[0-9]{4}$/.test(\r\n                                        input.value\r\n                                      )\r\n                                    ? input.errMinMsg\r\n                                    : null}\r\n                                </Typography>\r\n                              ) : null}\r\n                            </Grid>\r\n                          </Grid>\r\n                        </Grid>\r\n                      ))}\r\n\r\n                      {testData.textfield3.map((input: any, index: any) => (\r\n                        <Grid item xs={6}>\r\n                          <Grid container direction=\"column\">\r\n                            <Grid item>\r\n                              <Typography\r\n                                variant=\"body1\"\r\n                                style={{ fontWeight: 600 }}\r\n                                key={index}\r\n                              >\r\n                                {input.textlabel}\r\n                              </Typography>\r\n                            </Grid>\r\n\r\n                            <Grid item>\r\n                              <InputField\r\n                                variant=\"outlined\"\r\n                                fullWidth={input.fullWidth}\r\n                                type={input.type}\r\n                                size=\"small\"\r\n                                handleChange={(e) =>\r\n                                  handleEventChange(\"textfield3\", input, e)\r\n                                }\r\n                                handleBlur={(e) =>\r\n                                  handleBlurChange(\"textfield3\", input, e)\r\n                                }\r\n                                value={input.value}\r\n                                name={input.name}\r\n                                error={input.errState}\r\n                              />\r\n                              {input.errState ? (\r\n                                <Typography color=\"secondary\">\r\n                                  {input.value === \"\"\r\n                                    ? input.errEmptyMsg\r\n                                    : input.value.length < 3\r\n                                    ? input.errMinMsg\r\n                                    : input.value.length > 10\r\n                                    ? input.errMaxMsg\r\n                                    : null}\r\n                                </Typography>\r\n                              ) : null}\r\n                            </Grid>\r\n                          </Grid>\r\n                        </Grid>\r\n                      ))}\r\n\r\n                      {testData.radio.map((input: any, index: any) => (\r\n                        <>\r\n                          {input.type === \"radio\" ? (\r\n                            <>\r\n                              <Grid item xs={6} md={4} lg={3}>\r\n                                <Grid container direction=\"column\">\r\n                                  <Grid item>\r\n                                    <Typography\r\n                                      variant=\"body1\"\r\n                                      style={{ fontWeight: 600 }}\r\n                                      key={index}\r\n                                    >\r\n                                      {input.textlabel}\r\n                                    </Typography>\r\n                                  </Grid>\r\n\r\n                                  <Grid item>\r\n                                    {input.list.map((item: any) => {\r\n                                      return (\r\n                                        <>\r\n                                          <RadioButtonComp\r\n                                            label={item.name}\r\n                                            color=\"primary\"\r\n                                            size=\"small\"\r\n                                            checked={item.check}\r\n                                            handleRadio={handleRadio}\r\n                                          />\r\n                                        </>\r\n                                      );\r\n                                    })}\r\n                                  </Grid>\r\n                                </Grid>\r\n                              </Grid>\r\n                            </>\r\n                          ) : (\r\n                            <>\r\n                              <Grid item xs={6} md={4} lg={3}>\r\n                                <Typography\r\n                                  variant=\"body1\"\r\n                                  style={{ fontWeight: 600 }}\r\n                                >\r\n                                  {input.textlabel}\r\n                                </Typography>\r\n                                <FormControl fullWidth>\r\n                                  {/* <Select\r\n                                    labelId=\"demo-customized-select-label\"\r\n                                    id=\"demo-customized-select\"\r\n                                    input={<BootstrapInput />}\r\n                                    fullWidth\r\n                                    name={input.name}\r\n                                    // required={input.required}\r\n                                    onChange={(e) =>\r\n                                      handleupdate(e, input.textlabel)\r\n                                    }\r\n                                  >\r\n                                    {input.list.map((item: any, index: any) => {\r\n                                      return (\r\n                                        <MenuItem value={index + 1}>\r\n                                          <Typography\r\n                                            style={{ fontSize: \"12px\" }}\r\n                                          >\r\n                                            {item.name}\r\n                                          </Typography>\r\n                                        </MenuItem>\r\n                                      );\r\n                                    })}\r\n                                  </Select> */}\r\n\r\n                                  <Dropdown\r\n                                    input={input}\r\n                                    handleChange={handleupdate}\r\n                                  />\r\n                                </FormControl>\r\n                              </Grid>\r\n                            </>\r\n                          )}\r\n                        </>\r\n                      ))}\r\n\r\n                      <Grid container direction=\"row\" spacing={2}>\r\n                        {loop?.map((item: any) => {\r\n                          return (\r\n                            <Grid item xs={6}>\r\n                              <Typography\r\n                                variant=\"body1\"\r\n                                style={{ fontWeight: 600, marginLeft: \"20px\" }}\r\n                              >\r\n                                {\"Request Admit Date\"}\r\n                              </Typography>\r\n\r\n                              <FormControl fullWidth>\r\n                                {/* <Select\r\n                                  labelId=\"demo-customized-select-label\"\r\n                                  id=\"demo-customized-select\"\r\n                                  input={<BootstrapInput />}\r\n                                  style={{ width: \"90%\", marginLeft: \"10px\" }}\r\n                                >\r\n                                  {item.list.map((li: { name: string }) => {\r\n                                    return (\r\n                                      <MenuItem value={li.name}>\r\n                                        <Typography>{li.name}</Typography>\r\n                                      </MenuItem>\r\n                                    );\r\n                                  })}\r\n                                </Select> */}\r\n                                <Dropdown\r\n                                  input={item}\r\n                                  handleChange={handleselect}\r\n                                />\r\n                              </FormControl>\r\n                            </Grid>\r\n                          );\r\n                        })}\r\n\r\n                        {loop.map(() => {\r\n                          return (\r\n                            <Grid item xs={6} md={4} lg={3}>\r\n                              <Grid container direction=\"column\">\r\n                                <Grid item>\r\n                                  <Typography\r\n                                    variant=\"body1\"\r\n                                    style={{\r\n                                      fontWeight: 600,\r\n                                      marginLeft: \"10px\",\r\n                                    }}\r\n                                  >\r\n                                    {\"Admit Type\"}\r\n                                  </Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                  <InputField\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    fullWidth\r\n                                    // className={text}\r\n                                  />\r\n                                </Grid>\r\n                              </Grid>\r\n                            </Grid>\r\n                          );\r\n                        })}\r\n                      </Grid>\r\n                    </Grid>\r\n\r\n                    <br />\r\n                    <div>\r\n                      <Typography variant=\"h5\" className={classes.typomobile}>\r\n                        Searching and Facility Provider Information\r\n                      </Typography>\r\n                    </div>\r\n\r\n                    <Typography style={{ paddingTop: \"5px\" }}>\r\n                      Servicing facility provider information\r\n                    </Typography>\r\n                    <div className={classes.tool}>\r\n                      <Grid container xs={12}>\r\n                        <Grid item xs={6} md={8} lg={9}>\r\n                          <Typography\r\n                            variant=\"h6\"\r\n                            style={{ marginLeft: \"24px\" }}\r\n                            className={classes.servicetypo}\r\n                          >\r\n                            Searching and Facility Providers\r\n                          </Typography>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={6} md={4} lg={3}>\r\n                          <IconButton\r\n                            icon=\"circle\"\r\n                            variant=\"contained\"\r\n                            btn=\"btn\"\r\n                            handleClick={() => setserviceProvider(true)}\r\n                          >\r\n                            Add Provider\r\n                          </IconButton>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </div>\r\n\r\n                    <div>\r\n                      <Toolbar className={classes.toolbarItem2}>\r\n                        <div className={classes.gridContainer}>\r\n                          <Datatable\r\n                            rows={mainlist}\r\n                            rowsshow={mainlist.length > 0 ? true : false}\r\n                            headCells={ServiceheadCells}\r\n                            handlerowdata={[]}\r\n                            IcdModal={false}\r\n                          />\r\n                        </div>\r\n                      </Toolbar>\r\n                    </div>\r\n                    <br />\r\n\r\n                    <div>\r\n                      <Typography\r\n                        variant=\"h5\"\r\n                        style={{\r\n                          color: \"#383131\",\r\n                          borderBottom: \"1px solid #d6d0d0\",\r\n                        }}\r\n                      >\r\n                        *Diagnosis\r\n                      </Typography>\r\n                    </div>\r\n                    <Typography style={{ paddingTop: \"5px\" }}>\r\n                      Please add all diagnosis before selecting procedure\r\n                    </Typography>\r\n\r\n                    <Toolbar className={classes.tool}>\r\n                      <Grid container>\r\n                        <Grid item xs={6} md={8} lg={9}>\r\n                          <Typography\r\n                            variant=\"h6\"\r\n                            className={classes.servicetypo}\r\n                          >\r\n                            ICD - Search Results\r\n                          </Typography>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={6} md={4} lg={3}>\r\n                          <IconButton\r\n                            icon=\"circle\"\r\n                            variant=\"contained\"\r\n                            handleClick={() => setIcdmodal(true)}\r\n                            btn=\"diagnosisbtn\"\r\n                          >\r\n                            Add Diagnosis\r\n                          </IconButton>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Toolbar>\r\n                    <Toolbar className={classes.toolbarItem2}>\r\n                      <div className={classes.gridContainer}>\r\n                        <Datatable\r\n                          headCells={icdheadCells}\r\n                          rowsshow={selectIcddetails.length > 0 ? true : false}\r\n                          rows={selectIcddetails || [{}]}\r\n                          handlerowdata={[]}\r\n                          IcdModal={false}\r\n                        />\r\n                      </div>\r\n                    </Toolbar>\r\n\r\n                    <div className={classes.resetbtn}>\r\n                      <IconButton\r\n                        icon=\"left\"\r\n                        variant=\"contained\"\r\n                        type=\"reset\"\r\n                        color=\"primary\"\r\n                      >\r\n                        Cancel\r\n                      </IconButton>\r\n\r\n                      <IconButton\r\n                        icon=\"right\"\r\n                        variant=\"contained\"\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                      >\r\n                        Submit\r\n                      </IconButton>\r\n                    </div>\r\n                  </form>\r\n                </Toolbar>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n\r\n      <Formmodal\r\n        open={serviceProvider}\r\n        handleClose={handleClose}\r\n        setmodalformdata={setmodalformdata}\r\n        modalformdata={modalformdata}\r\n        handleSubmit={handleSubmit}\r\n      />\r\n\r\n      <IcdModal\r\n        open={IcdmodalOpen}\r\n        handleClose={handleClose}\r\n        setselectIcddetails={setselectIcddetails}\r\n        setIcdmodal={setIcdmodal}\r\n        selectIcddetails={selectIcddetails}\r\n      />\r\n      <SnackBar\r\n        handleClose={handleSnackbarClose}\r\n        open={snackBarOpen}\r\n        severity={severity}\r\n        message={message}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\MedicalForm.tsx",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\Appbar.tsx",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\IcdModal.tsx",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\Sidebar.tsx",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\DataTable.tsx",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\FormModal.tsx",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\Snackbar.tsx",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\pages\\data.tsx",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\UI\\components\\RadioButton\\RadioButton.tsx",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\UI\\components\\Button\\Button.tsx",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\UI\\components\\TextField\\InputField.tsx",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\UI\\components\\Dropdown\\Dropdown.tsx",["190"],"import React, { FC } from \"react\";\r\nimport { FormControl, Select, Typography, MenuItem } from \"@material-ui/core\";\r\n// import { MenuItem } from 'material-ui';\r\n// import Typography from 'material-ui/styles/typography';\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nimport { withStyles } from \"@material-ui/styles\";\r\n\r\nconst BootstrapInput = withStyles((theme) => ({\r\n    root: {\r\n      \"label + &\": {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      position: \"relative\",\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: \"1px solid #ced4da\",\r\n      fontSize: 16,\r\n      padding: \"10px 26px 10px 12px\",\r\n      transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n      fontFamily: [\r\n        \"-apple-system\",\r\n        \"BlinkMacSystemFont\",\r\n        '\"Segoe UI\"',\r\n        \"Roboto\",\r\n        '\"Helvetica Neue\"',\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n        '\"Apple Color Emoji\"',\r\n        '\"Segoe UI Emoji\"',\r\n        '\"Segoe UI Symbol\"',\r\n      ].join(\",\"),\r\n      \"&:focus\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#80bdff\",\r\n        boxShadow: \"0 0 0 0.2rem rgba(0,123,255,.25)\",\r\n      },\r\n    },\r\n  }))(InputBase);\r\ninterface Props {\r\n  handleChange: (e: any, value:any ) => void;\r\n  name?: any;\r\n  value?: any;\r\n  handleBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\r\n  fullWidth?: any;\r\n  input: any;\r\n}\r\n\r\nconst Dropdown: FC<Props> = ({\r\n  value,\r\n  handleChange,\r\n  name,\r\n  handleBlur,\r\n  fullWidth,\r\n  input,\r\n}) => {\r\n  return (\r\n    <>\r\n      <Select\r\n        value={value}\r\n        onChange={(e)=>handleChange(e, input?.textlabel)}\r\n        onBlur={handleBlur}\r\n        name={name}\r\n        variant=\"outlined\"\r\n        input={<BootstrapInput />}\r\n        style={{ width: \"100%\" }}\r\n      >\r\n        {input.list.map((item: any, index:any) => {\r\n          return (\r\n            <MenuItem value={index}>\r\n              <Typography style={{ fontSize: \"12px\" }}>{item.name}</Typography>\r\n            </MenuItem>\r\n          );\r\n        })}\r\n      </Select>\r\n    </>\r\n  );\r\n};\r\nexport default Dropdown;\r\n","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\UI\\components\\IconButton\\IconButton.tsx",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\components\\Modal.tsx",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\pages\\SidebarData.tsx",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_helpers\\index.js",[],["191","192"],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_helpers\\fake-backend.js",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_helpers\\store.js",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_helpers\\history.js",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_helpers\\auth-header.js",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_reducers\\index.js",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_reducers\\alert.reducer.js",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_reducers\\users.reducer.js",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_reducers\\registration.reducer.js",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_reducers\\authentication.reducer.js",["193"],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_constants\\index.js",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_constants\\user.constants.js",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_constants\\alert.constants.js",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_actions\\index.js",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_actions\\alert.actions.js",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_actions\\user.actions.js",["194","195"],"import { userConstants } from '../_constants';\r\nimport { userService } from '../_services';\r\nimport { alertActions } from './alert.actions';\r\nimport { history } from '../_helpers';\r\nimport 'antd/dist/antd.css';\r\nimport { message, } from 'antd';\r\nexport const userActions = {\r\n    login,\r\n   \r\n};\r\n\r\nfunction login(payload) {\r\n    return dispatch => {\r\n        // dispatch(request({ username }));\r\n\r\n        userService.login(payload)\r\n            .then(\r\n                user => { \r\n                    dispatch(success(user));\r\n                    // history.push('/dashboard');\r\n                },\r\n                error => {\r\n                    message.error(' Invalid  Details please try again');\r\n                    dispatch(failure(error.toString()));\r\n                    dispatch(alertActions.error(error.toString()));\r\n                }\r\n            );\r\n    };\r\n\r\n    function request(user) { return { type: userConstants.LOGIN_REQUEST, user } }\r\n    function success(user) { return { type: userConstants.LOGIN_SUCCESS, user } }\r\n    function failure(error) { return { type: userConstants.LOGIN_FAILURE, error } }\r\n}\r\n\r\n","C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_services\\index.js",[],"C:\\Users\\srikanth\\Downloads\\tsconfig\\src\\redux\\_services\\user.service.js",[],{"ruleId":"196","replacedBy":"197"},{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","severity":1,"message":"201","line":49,"column":24,"nodeType":"202","messageId":"203","endLine":49,"endColumn":39},{"ruleId":"200","severity":1,"message":"204","line":55,"column":9,"nodeType":"202","messageId":"203","endLine":55,"endColumn":15},{"ruleId":"205","severity":1,"message":"206","line":161,"column":9,"nodeType":"207","messageId":"208","endLine":161,"endColumn":11},{"ruleId":"205","severity":1,"message":"206","line":179,"column":74,"nodeType":"207","messageId":"208","endLine":179,"endColumn":76},{"ruleId":"209","severity":1,"message":"210","line":203,"column":6,"nodeType":"211","endLine":203,"endColumn":14,"suggestions":"212"},{"ruleId":"200","severity":1,"message":"213","line":10,"column":3,"nodeType":"202","messageId":"203","endLine":10,"endColumn":9},{"ruleId":"200","severity":1,"message":"214","line":12,"column":3,"nodeType":"202","messageId":"203","endLine":12,"endColumn":11},{"ruleId":"200","severity":1,"message":"215","line":39,"column":7,"nodeType":"202","messageId":"203","endLine":39,"endColumn":21},{"ruleId":"200","severity":1,"message":"216","line":215,"column":10,"nodeType":"202","messageId":"203","endLine":215,"endColumn":17},{"ruleId":"200","severity":1,"message":"217","line":215,"column":19,"nodeType":"202","messageId":"203","endLine":215,"endColumn":29},{"ruleId":"200","severity":1,"message":"218","line":240,"column":10,"nodeType":"202","messageId":"203","endLine":240,"endColumn":15},{"ruleId":"219","severity":1,"message":"220","line":288,"column":42,"nodeType":"221","messageId":"222","endLine":288,"endColumn":44},{"ruleId":"219","severity":1,"message":"220","line":289,"column":43,"nodeType":"221","messageId":"222","endLine":289,"endColumn":45},{"ruleId":"219","severity":1,"message":"223","line":289,"column":43,"nodeType":"221","messageId":"222","endLine":289,"endColumn":45},{"ruleId":"219","severity":1,"message":"223","line":303,"column":44,"nodeType":"221","messageId":"222","endLine":303,"endColumn":46},{"ruleId":"219","severity":1,"message":"220","line":312,"column":46,"nodeType":"221","messageId":"222","endLine":312,"endColumn":48},{"ruleId":"219","severity":1,"message":"220","line":313,"column":46,"nodeType":"221","messageId":"222","endLine":313,"endColumn":48},{"ruleId":"205","severity":1,"message":"206","line":440,"column":63,"nodeType":"207","messageId":"208","endLine":440,"endColumn":65},{"ruleId":"205","severity":1,"message":"206","line":509,"column":63,"nodeType":"207","messageId":"208","endLine":509,"endColumn":65},{"ruleId":"200","severity":1,"message":"224","line":575,"column":9,"nodeType":"202","messageId":"203","endLine":575,"endColumn":21},{"ruleId":"225","severity":1,"message":"226","line":594,"column":7,"nodeType":"227","messageId":"228","endLine":594,"endColumn":25,"fix":"229"},{"ruleId":"200","severity":1,"message":"230","line":2,"column":10,"nodeType":"202","messageId":"203","endLine":2,"endColumn":21},{"ruleId":"196","replacedBy":"197"},{"ruleId":"198","replacedBy":"199"},{"ruleId":"231","severity":1,"message":"232","line":3,"column":5,"nodeType":"202","messageId":"203","endLine":3,"endColumn":9},{"ruleId":"231","severity":1,"message":"233","line":4,"column":10,"nodeType":"202","messageId":"203","endLine":4,"endColumn":17},{"ruleId":"231","severity":1,"message":"234","line":30,"column":14,"nodeType":"202","messageId":"203","endLine":30,"endColumn":21},"no-native-reassign",["235"],"no-negated-in-lhs",["236"],"@typescript-eslint/no-unused-vars","'setErrorMessage' is assigned a value but never used.","Identifier","unusedVar","'errors' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["237"],"'Select' is defined but never used.","'MenuItem' is defined but never used.","'BootstrapInput' is assigned a value but never used.","'checked' is assigned a value but never used.","'setchecked' is assigned a value but never used.","'error' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","'array' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property [\"dropdown\"] found.","Property","unnecessarilyComputedProperty",{"range":"238","text":"239"},"'FormControl' is defined but never used.","no-unused-vars","'user' is assigned a value but never used.","'history' is defined but never used.","'request' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"240","fix":"241"},[16666,16678],"\"dropdown\"","Update the dependencies array to be: [history, isAuth]",{"range":"242","text":"243"},[5704,5712],"[history, isAuth]"]