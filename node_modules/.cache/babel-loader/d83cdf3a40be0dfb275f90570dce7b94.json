{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\srikanth\\\\Downloads\\\\tsconfig\\\\src\\\\components\\\\MedicalForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Sidebar from \"./Sidebar\";\nimport { Typography, Toolbar } from \"@material-ui/core\"; // import Button from \"@material-ui/core/Button\";\n\nimport ModalForm from \"./Modal\";\nimport inputFormElements from \"../pages/SearchFormData.json\";\nimport InputField from \"../UI/components/TextField/InputField\";\nimport ButtonComponent from '../UI/components/Button/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  palette: {\n    primary: {\n      main: \"#0c1d7b\"\n    }\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"left\",\n    color: \"#0c1d7b\"\n  },\n  grid: {\n    marginTop: \"-43px\",\n    backgroundColor: \"#fff\"\n  },\n  btn: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      textTransform: \"none\"\n    },\n    paddingRight: \"30px !important\"\n  },\n  toolbarItem1: {\n    border: \"2px solid #dcd7d7\",\n    minHeight: \"32px\",\n    borderRadius: \"6px\",\n    backgroundColor: \"#edeef3\"\n  },\n  toolbarItem2: {\n    borderLeft: \"2px solid #dcd7d7\",\n    borderBottom: \"2px solid #dcd7d7\",\n    borderRight: \"2px solid #dcd7d7\",\n    borderRadius: \"6px\"\n  },\n  form: {\n    padding: \"24px\"\n  },\n  gridContainer: {\n    padding: \"24px 0px\"\n  },\n  container: {\n    height: \"48px\"\n  }\n}));\n\nconst MedicalForm = props => {\n  _s();\n\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [formdata, setformdata] = useState({});\n  const [inputFormElems, setInputFormElems] = useState(inputFormElements);\n\n  const handleClose = () => {\n    setOpen(false); // const newinputformelems:any = inputFormElems.map(each=> each.value = \"\");\n    // setInputFormElems(newinputformelems);\n    // console.log(inputFormElems,\"input\")\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    var array = [];\n    let errors = {}; // eslint-disable-next-line array-callback-return\n\n    inputFormElems.map(item => {\n      if (item.value === \"\" || item.value !== \"\" && item.value.length < 3 || item.value.length > 10) {\n        item.errState = true;\n        errors[item.name] = \"validation Error\";\n      }\n\n      array.push(item);\n    });\n    setInputFormElems(array);\n\n    if (Object.keys(errors).length === 0) {\n      setOpen(true);\n    }\n  };\n\n  const handlechange = (info, e) => {\n    var array = []; // eslint-disable-next-line array-callback-return\n\n    inputFormElems.map(item => {\n      if (item.name === info.name) {\n        item.value = e.target.value;\n        if (item.value !== \"\") item.errState = false;\n      }\n\n      array.push(item);\n    });\n    setInputFormElems(array);\n    setformdata({ ...formdata,\n      [info.name]: e.target.value\n    });\n  };\n\n  const handleBlur = (info, e) => {\n    var array = []; // eslint-disable-next-line array-callback-return\n\n    inputFormElems.map(item => {\n      if (item.name === info.name) {\n        if (item.value === \"\" || item.value !== \"\" && item.value.length < 3 || item.value.length > 10) {\n          item.errState = true;\n        } else item.errState = false;\n      }\n\n      array.push(item);\n    });\n    setInputFormElems(array);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 2,\n        children: /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 10,\n        className: classes.grid,\n        children: [/*#__PURE__*/_jsxDEV(Paper, {\n          className: classes.paper,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            children: \"Request Pharmacy Prior Authorizations\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          autoComplete: \"off\",\n          className: classes.form,\n          children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n            className: classes.toolbarItem1,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              children: \"Search for Member\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Toolbar, {\n            className: classes.toolbarItem2,\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              className: classes.gridContainer,\n              autoComplete: \"off\",\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                direction: \"row\",\n                xs: 12,\n                spacing: 4,\n                children: inputFormElems.map(input => /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 6,\n                  children: /*#__PURE__*/_jsxDEV(Grid, {\n                    container: true,\n                    direction: \"column\",\n                    children: [/*#__PURE__*/_jsxDEV(Grid, {\n                      item: true,\n                      children: /*#__PURE__*/_jsxDEV(Typography, {\n                        variant: \"body1\",\n                        children: input.textlabel\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 170,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 169,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                      item: true,\n                      xs: 12,\n                      children: [/*#__PURE__*/_jsxDEV(InputField, {\n                        variant: \"outlined\",\n                        fullWidth: input.fullWidth,\n                        type: input.type,\n                        size: \"small\",\n                        handleChange: e => handlechange(input, e),\n                        value: input.value,\n                        handleBlur: e => handleBlur(input, e)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 179,\n                        columnNumber: 27\n                      }, this), input.errState ? /*#__PURE__*/_jsxDEV(Typography, {\n                        color: \"secondary\",\n                        children: input.value === \"\" ? input.errEmptyMsg : input.value.length < 3 ? input.errMinMsg : input.value.length > 10 ? input.errMaxMsg : null\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 189,\n                        columnNumber: 29\n                      }, this) : null]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 178,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 168,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                spacing: 2,\n                style: {\n                  textAlign: 'right'\n                },\n                children: /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  className: classes.btn,\n                  children: [/*#__PURE__*/_jsxDEV(ButtonComponent, {\n                    variant: \"contained\",\n                    color: \"primary\",\n                    type: \"reset\",\n                    children: \"Clear\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 207,\n                    columnNumber: 20\n                  }, this), /*#__PURE__*/_jsxDEV(ButtonComponent, {\n                    variant: \"contained\",\n                    color: \"primary\",\n                    type: \"submit\",\n                    handleSubmit: e => handleSubmit(e),\n                    children: \"Search\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 214,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalForm, {\n      open: open,\n      handleClose: handleClose,\n      formdata: formdata\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MedicalForm, \"QvxsKJ2sK4s4nHU7QlUCOKQElZk=\", false, function () {\n  return [useStyles];\n});\n\n_c = MedicalForm;\nexport default MedicalForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MedicalForm\");","map":{"version":3,"sources":["C:/Users/srikanth/Downloads/tsconfig/src/components/MedicalForm.tsx"],"names":["React","useState","makeStyles","Paper","Grid","Sidebar","Typography","Toolbar","ModalForm","inputFormElements","InputField","ButtonComponent","useStyles","theme","palette","primary","main","paper","padding","spacing","textAlign","color","grid","marginTop","backgroundColor","btn","margin","textTransform","paddingRight","toolbarItem1","border","minHeight","borderRadius","toolbarItem2","borderLeft","borderBottom","borderRight","form","gridContainer","container","height","MedicalForm","props","classes","open","setOpen","formdata","setformdata","inputFormElems","setInputFormElems","handleClose","handleSubmit","e","preventDefault","array","errors","map","item","value","length","errState","name","push","Object","keys","handlechange","info","target","handleBlur","input","textlabel","fullWidth","type","errEmptyMsg","errMinMsg","errMaxMsg"],"mappings":"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","sourcesContent":["import React, {useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport { Typography, Toolbar } from \"@material-ui/core\";\r\n// import Button from \"@material-ui/core/Button\";\r\nimport ModalForm from \"./Modal\";\r\nimport inputFormElements from \"../pages/SearchFormData.json\";\r\nimport InputField from \"../UI/components/TextField/InputField\";\r\nimport ButtonComponent from '../UI/components/Button/Button';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  palette: {\r\n    primary: {\r\n      main: \"#0c1d7b\",\r\n    },\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"left\",\r\n    color: \"#0c1d7b\",\r\n  },\r\n  grid: {\r\n    marginTop: \"-43px\",\r\n    backgroundColor: \"#fff\",\r\n  },\r\n  btn: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      textTransform: \"none\",\r\n      \r\n    },\r\n    paddingRight: \"30px !important\",\r\n  },\r\n  toolbarItem1: {\r\n    border: \"2px solid #dcd7d7\",\r\n    minHeight: \"32px\",\r\n    borderRadius: \"6px\",\r\n    backgroundColor: \"#edeef3\",\r\n  },\r\n  toolbarItem2: {\r\n    borderLeft: \"2px solid #dcd7d7\",\r\n    borderBottom: \"2px solid #dcd7d7\",\r\n    borderRight: \"2px solid #dcd7d7\",\r\n    borderRadius: \"6px\",\r\n  },\r\n  form: {\r\n    padding: \"24px\",\r\n  },\r\n  gridContainer: {\r\n    padding: \"24px 0px\",\r\n  },\r\n  container: {\r\n    height: \"48px\",\r\n  },\r\n}));\r\n\r\ninterface IProps{\r\n  open:boolean,\r\n  handleClose(): any,\r\n  formdata:object\r\n}\r\n\r\nconst MedicalForm=(props:IProps)=> {\r\n  \r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [formdata, setformdata] = useState({});\r\n  const [inputFormElems, setInputFormElems] = useState(inputFormElements);\r\n\r\n  \r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    // const newinputformelems:any = inputFormElems.map(each=> each.value = \"\");\r\n    // setInputFormElems(newinputformelems);\r\n    // console.log(inputFormElems,\"input\")\r\n  };\r\n  \r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    var array: any[] = [];\r\n    let errors:object | any = {};\r\n    // eslint-disable-next-line array-callback-return\r\n    inputFormElems.map((item) => {\r\n    if (\r\n        item.value === \"\" ||\r\n        (item.value !== \"\" && item.value.length < 3) ||\r\n        item.value.length > 10\r\n      ) {\r\n        item.errState = true;\r\n        errors[item.name] = \"validation Error\";\r\n      }\r\n      array.push(item);\r\n    });\r\n    setInputFormElems(array);\r\n    if (Object.keys(errors).length === 0) {\r\n      setOpen(true);\r\n    }\r\n  };\r\n\r\n  const handlechange = (info: { name: string; textlabel: string; errState: boolean; variant: string; fullWidth: boolean; errEmptyMsg: string; xs: number; sm: number; errMinMsg: string; errMaxMsg: string; value: string; type?: undefined; } | {\r\n          name: string; type: string; textlabel: string; errState: boolean; variant: string; fullWidth: boolean; errEmptyMsg: string; xs:\r\n              number; sm: number; errMinMsg: string; errMaxMsg: string; value: string;\r\n      }, e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n    var array: any[] = [];\r\n    // eslint-disable-next-line array-callback-return\r\n    inputFormElems.map((item) => {\r\n      if (item.name === info.name) {\r\n        item.value = e.target.value;\r\n        if (item.value !== \"\") item.errState = false;\r\n      }\r\n      array.push(item);\r\n    });\r\n    setInputFormElems(array);\r\n    setformdata({ ...formdata, [info.name]: e.target.value });\r\n  };\r\n\r\n  const handleBlur = (info: { name: string; textlabel: string; errState: boolean; variant: string; fullWidth: boolean; errEmptyMsg: string; xs: number; sm: number; errMinMsg: string; errMaxMsg: string; value: string; type?: undefined; } | { name: string; type: string; textlabel: string; errState: boolean; variant: string; fullWidth: boolean; errEmptyMsg: string; xs: number; sm: number; errMinMsg: string; errMaxMsg: string; value: string; }, e: React.FocusEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n    var array: any[] = [];\r\n    // eslint-disable-next-line array-callback-return\r\n    inputFormElems.map((item) => {\r\n      if (item.name === info.name) {\r\n        if (\r\n          item.value === \"\" ||\r\n          (item.value !== \"\" && item.value.length < 3) ||\r\n          item.value.length > 10\r\n        ) {\r\n          item.errState = true;\r\n        } else item.errState = false;\r\n      }\r\n      array.push(item);\r\n    });\r\n    setInputFormElems(array);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Grid container>\r\n        <Grid item xs={2}>\r\n          <Sidebar />\r\n        </Grid>\r\n\r\n        <Grid item xs={10} className={classes.grid}>\r\n          <Paper className={classes.paper}>\r\n            <Typography variant=\"h5\">\r\n              Request Pharmacy Prior Authorizations\r\n            </Typography>\r\n          </Paper>\r\n\r\n          <form\r\n            autoComplete=\"off\"\r\n            className={classes.form}\r\n           \r\n          >\r\n            <Toolbar className={classes.toolbarItem1}>\r\n              <Typography variant=\"h6\">\r\n                Search for Member\r\n              </Typography>\r\n            </Toolbar>\r\n\r\n            <Toolbar className={classes.toolbarItem2}>\r\n              <form className={classes.gridContainer} autoComplete=\"off\">\r\n                <Grid container direction=\"row\" xs={12} spacing={4}>\r\n                  {inputFormElems.map((input) => (\r\n                    <Grid item xs={6}>\r\n                      <Grid container direction=\"column\">\r\n                        <Grid item>\r\n                          <Typography\r\n                            variant=\"body1\"\r\n                            \r\n                          >\r\n                            {input.textlabel}\r\n                          </Typography>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12}>\r\n                          <InputField\r\n                            variant=\"outlined\"\r\n                            fullWidth={input.fullWidth}\r\n                            type={input.type}\r\n                            size=\"small\"\r\n                            handleChange={(e:any) => handlechange(input, e)}\r\n                            value={input.value}\r\n                            handleBlur={(e:any) => handleBlur(input, e)}\r\n                          />\r\n                          {input.errState ? (\r\n                            <Typography color=\"secondary\">\r\n                              {input.value === \"\"\r\n                                ? input.errEmptyMsg\r\n                                : input.value.length < 3\r\n                                ? input.errMinMsg\r\n                                : input.value.length > 10\r\n                                ? input.errMaxMsg\r\n                                : null}\r\n                            </Typography>\r\n                          ) : null}\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  ))}\r\n                </Grid>\r\n\r\n                <Grid container spacing={2} style={{textAlign:'right'}}>\r\n                  <Grid item xs={12} className={classes.btn}>\r\n                   <ButtonComponent \r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      type=\"reset\" \r\n                      > \r\n                      Clear\r\n                      </ButtonComponent>\r\n                    <ButtonComponent\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      type=\"submit\"\r\n                    handleSubmit={(e:any)=>handleSubmit(e)}\r\n                      \r\n                    >\r\n                      Search\r\n                    </ButtonComponent>\r\n                  </Grid>\r\n                </Grid>\r\n              </form>\r\n            </Toolbar>\r\n          </form>\r\n        </Grid>\r\n      </Grid>\r\n     <ModalForm open={open} handleClose={handleClose} formdata={formdata}   />\r\n    </div>\r\n  );\r\n}\r\nexport default MedicalForm;\r\n"]},"metadata":{},"sourceType":"module"}